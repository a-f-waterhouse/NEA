@page "/hill"
@rendermode InteractiveServer

<PageTitle>Hill</PageTitle>

<h1>Hill Cipher</h1>

<p>Plaintext: </p>
<textarea class="submission" @bind=plaintext @bind:event="oninput"></textarea>
<br>
<p>Ciphertext: </p>
<textarea class="submission" @bind=ciphertext @bind:event="oninput"></textarea>
<br>
<p>Enter key: </p>
<textarea class="submission" @bind=key @bind:event="oninput"></textarea>
<br />

<input type="checkbox" @bind=encrypt>

<button @onclick="HillEncrypt">SUBMIT</button>
<br />
<p>@error</p>

@code {
    private string plaintext = "";
    private string key = "";
    private string ciphertext = "";
    private string error = "";
    private bool encrypt;


    private void HillEncrypt()
    {
        Matrix matrixKey = new Matrix(key.ToUpper());
        string original;
        string result;

        if(!encrypt)
        {
            matrixKey = matrixKey.inverse();
            original = ciphertext.ToUpper();
            result = plaintext.ToUpper();
        }
        else
        {
            original = plaintext.ToUpper();
            result = ciphertext.ToUpper();
        }

        for (int i = 0; i < original.Length; i+= matrixKey.n) //cycle through chunks of text
        {
            int[] chunk = new int[matrixKey.n];
            for (int j = 0; j < matrixKey.n; j++)
            {
                chunk[j] = original[i + j] - 'A';
            }

            int[] newChunk = new int[matrixKey.n];

            for (int row = 0; row < matrixKey.n; row++)
            {
                for (int col = 0; col < matrixKey.n; col++)
                {
                    newChunk[row] += (matrixKey.element(row, col) * chunk[col]);
                }
                result += (char)(newChunk[row] %26 + 'A');

            }
        }

        if (!encrypt)
        {
            ciphertext = original.ToUpper();
            plaintext = result.ToUpper();
        }
        else
        {
            ciphertext = result.ToUpper();
            plaintext = original.ToUpper();
        }

    }



}
