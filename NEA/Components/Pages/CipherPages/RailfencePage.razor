@page "/RailfencePage"
@rendermode InteractiveServer

<h1>Railfence</h1>

<div class="boxes">
    <div class="box">
        <p>Plaintext: </p>
        <textarea class="submission" @bind=plaintext @bind:event="oninput"></textarea>
    </div>
    <div class="box">
        <p>Ciphertext: </p>
        <textarea class="submission" @bind=ciphertext @bind:event="oninput"></textarea>
    </div>
    <div class="box">
        <p>Key: </p>
        <textarea class="submission" @bind=key @bind:event="oninput"></textarea>
    </div>

</div>

<p>@errors</p>
<button @onclick="encryptButton">ENCRYPT</button>
<button @onclick="decryptButton">DECRYPT</button>
<button @onclick="Bruteforce">BRUTEFORCE</button>


@code {
    string plaintext = "";
    int key = 0;
    string ciphertext = "";
    string errors = "";

    void encryptButton()
    {
        errors = "";
        if(key > 1 && key < plaintext.Length)
        {
            plaintext = plaintext.ToLower();
            ciphertext = Railfence.Encrypt(plaintext, key);
        }
        else
        {
            errors = "Key must be less than the length of the plaintext.";
        }

    }

    void decryptButton()
    {
        errors = "";
        if(key > 1 && key < plaintext.Length)
        {
            ciphertext = ciphertext.ToLower();
            plaintext = Railfence.Decrypt(ciphertext, key);
        }
        else
        {
            errors = "Key must be less than the length of the plaintext.";
        }

    }
    void Bruteforce()
    {
        ciphertext = ciphertext.ToLower();
        Dictionary<double, string> chisquaredValues = new Dictionary<double, string>();
        int i = 2;
        while(i < 100 && i < ciphertext.Length-1)
        {
            string d = Railfence.Decrypt(ciphertext, i);
            double c = CryptanalysisFunctions.BigramFitness(d);
            if (!chisquaredValues.ContainsKey(c))
            {
                chisquaredValues.Add(c, d);
            }
            i++;
        }

        plaintext = chisquaredValues[chisquaredValues.Keys.Max()];
    }


}
