@page "/practice"
@rendermode InteractiveServer
@inject IJSRuntime JS

<canvas id="confetti-canvas" style="position:fixed;z-index:999999;pointer-events:none" width="1000" height="665"></canvas>
<h1>PRACTICE</h1>
<div class="box">
Instructions: tick different boxes to choose what type of cipher you want to practice decrypting. Either choose a specific cipher, the components you want to practice, or randomise it!<br />
For hints (which may be necessary for some problems), click the hint button, which will reveal them one at a time.<br />
To check your answer, type it into the answer box and press submit.
</div>

<div class="box choices">
    <select @bind=choice @bind:event="oninput">
        <option value="specific">Specific cipher</option>
        <option value="parts">Choose the components</option>
        <option value="random">Random!</option>
    </select>
    <br />
    <br />
    @if(choice == "specific")
    {      
        <h6>Individual Ciphers</h6>

        <fieldset>
            <InputRadioGroup @bind-Value="cipher">
                @foreach (string cipher in ciphers)
                {
                    <div>
                        <label>
                            <InputRadio Value="cipher" />
                            @cipher
                        </label>
                    </div>
                }
            </InputRadioGroup>
        </fieldset>

    } 
    else if (choice == "parts")
    {
        <h6>Components</h6>
        <span>Polyalphabetic</span>
        <label class="switch">
            <input type="checkbox" @bind="mono">
            <span class="slider"></span>
        </label>
        <span>Monoalphabetic</span>
        <br />
        <span>Transposition</span>
        <label class="switch">
            <input type="checkbox" @bind="substitution">
            <span class="slider"></span>
        </label>
        <span>Substitution</span>
        
    }
    else if(choice == "random")
    {
        <h6>Random</h6>
        <button>RANDOM</button>
    }
</div>
<button @onclick="Generate">GENERATE CIPHERTEXT</button>
<br />
<pre>@ciphertext</pre>
<br />
<textarea @bind=decryptionAttempt @bind:event="oninput"></textarea>
<button @onclick="Check">SUBMIT</button>
<button @onclick="Hint">HINT</button>
<ul>
    @foreach (string hint in hints)
    {
        <li>@hint</li>
    }
</ul>


@code {
    Random rnd = new Random();
    int hintCount = 0;

    string choice = "";
    string cipher = "";
    string decryptionAttempt = "";

    bool mono = false, substitution = false;

    string[] ciphers = { "caesar", "affine", "substitution", "vigenere", "railfence"};
    string plaintext = "", ciphertext = "";
    List<string> hints = new List<string>();


    void getSampleText()
    {
        Random rnd = new Random();
        string[] paragraphs = File.ReadAllLines(System.IO.Path.Combine(System.IO.Directory.GetCurrentDirectory(), "wwwroot/sampleText.txt"));
        plaintext = paragraphs[rnd.Next(0, paragraphs.Length)].ToLower();
    }

    void Generate()
    {        
        hintCount = 0;
        hints.Clear();
        Random rnd = new Random();
        getSampleText();   

        switch(choice)
        {
            case "parts":
                if(!mono && !substitution)
                {
                    ciphertext = "Invalid choices";
                    cipher = "";
                }
                else if(!mono)
                {
                    cipher = "vigenere";
                }
                else if(substitution)
                {
                    cipher = ciphers[rnd.Next(0, 3)];
                }
                else
                {
                    cipher = "railfence";
                }

                break;

            case "random":

                cipher = ciphers[rnd.Next(0, ciphers.Length)];

                break;

        }

        if(cipher != "")
        {
            EncryptWithSpecificCipher(cipher);
        }        
    }

    void EncryptWithSpecificCipher(string input)
    {        
        switch (input)
        {
            case "caesar":
                ciphertext = Caesar.Encrypt(plaintext, rnd.Next(1, 25));
                break;

            case "affine":
                ciphertext = Affine.Encrypt(rnd.Next(1, 25), rnd.Next(1, 25), plaintext);
                break;

            case "vigenere":
                string key = RandomWord();
                ciphertext = Vigenere.Encrypt(key, plaintext);
                break;

            case "substitution":
                string k = RandomWord();
                Dictionary<char, char> encryptionMap = new Dictionary<char, char>(), decryptionMap = new Dictionary<char, char>();
                Substitution.getKey(k, ref encryptionMap, ref decryptionMap);
                ciphertext = Substitution.MapCharacters(plaintext, encryptionMap);
                break;

            case "railfence":                
                ciphertext = Railfence.Encrypt(plaintext, rnd.Next(2, 10));
                break;

        }        
    }

    void Hint()
    {
        switch(hintCount)
        {
            case 0:
                hints.Add("The type of cipher is: " + cipher);
                break;

            case 1:
                string[] split = plaintext.Split(' ');
                int value = rnd.Next(0, split.Length);
                string plaintextSample = split[value] + " " + split[value+1] + " " +split[value + 2];
                hints.Add("A part of the plaintext is: " + plaintextSample);
                break;

        }
        hintCount++;
    }

    void HintBcWrong()
    {
        hints.Clear();
        double iocInput = CryptanalysisFunctions.IndexOfCoincidence(decryptionAttempt);
        double expectedIoc = CryptanalysisFunctions.IndexOfCoincidence(plaintext);
        if(iocInput < expectedIoc)
        {
            hints.Add("You're index of coincidence is too low.");
            switch(cipher)
            {
                case "vigenere":
                    hints.Add("Try a different length of key.");
                    break;

                default:
                    hints.Add("You may have the type of cipher wrong!");
                    break;

            }          
        }
        double x2Input = CryptanalysisFunctions.X2Stat(CryptanalysisFunctions.CalculateLetterFrequencies(decryptionAttempt));
        double expectedx2 = CryptanalysisFunctions.X2Stat(CryptanalysisFunctions.CalculateLetterFrequencies(plaintext));
        if(x2Input > expectedx2 && cipher == "railfence")
        {
            hints.Add("You may have the type of cipher wrong. Think about the letter frequencies.");

        }

    }


    async void Check()
    {
        decryptionAttempt = decryptionAttempt.ToLower();
        bool error = false;
        int i = 0;

        while(! error && i < ciphertext.Length)
        {
            if(ciphertext[i] != decryptionAttempt[i])
            {
                error = true;
                hints.Clear();
                hints.Add("Incorrect from character i onwards :(");
            }
            i++;
        }
        hints.Clear();
        hints.Add("Correct!");
        await Confetti();
    }

    string RandomWord()
    {
        WebRequest request = WebRequest.Create("https://random-word-api.herokuapp.com/word");
        request.Method = WebRequestMethods.Http.Get;
        request.ContentType = "application/json";
        string word = "";
        try
        {
            HttpWebResponse response = (HttpWebResponse)request.GetResponse();
            using (StreamReader sr = new StreamReader(response.GetResponseStream()))
            {
                word = sr.ReadToEnd();
            }
        }
        catch
        {
            hints.Add("API Request Failed. Please try again.");
        }


        word = word.Substring(2, word.Length - 4);
        Console.WriteLine(word);
        
        return word;
        //string[] words = File.ReadAllLines(System.IO.Path.Combine(System.IO.Directory.GetCurrentDirectory(), "wwwroot/nouns.txt"));
        //return words[rnd.Next(0, words.Length)];
    }

    public async Task Confetti()
    {
        await JS.InvokeVoidAsync("startConfetti");
    }



}
