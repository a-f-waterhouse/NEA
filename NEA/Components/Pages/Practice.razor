@page "/practice"
@rendermode InteractiveServer
<h1>PRACTICE</h1>
<div class="box">
Instructions: tick different boxes to choose what type of cipher you want to practice decrypting. Either choose a specific cipher, the components you want to practice, or randomise it!<br />
For hints (which may be necessary for some problems), click the hint button, which will reveal them one at a time.<br />
To check your answer, type it into the answer box and press submit.
</div>

<div class="box choices">
    <select @bind=choice @bind:event="oninput">
        <option value="specific">Specific cipher</option>
        <option value="parts">Choose the components</option>
        <option value="random">Random!</option>
    </select>
    
    @if(choice == "specific")
    {
        <br />
        <h6>Individual Ciphers</h6>

        <fieldset>
            <InputRadioGroup @bind-Value="cipher">
                @foreach (string cipher in ciphers)
                {
                    <div>
                        <label>
                            <InputRadio Value="cipher" />
                            @cipher
                        </label>
                    </div>
                }
            </InputRadioGroup>
        </fieldset>

    } 
    else if (choice == "parts")
    {
        <input type="checkbox" checked = ""/><label>Polyalphabetic/monoalphabetic</label>
        <input type="checkbox" checked="" /><label>2</label>
        
    }
    else if(choice == "random")
    {
        <button>RANDOM</button>
    }
</div>
<button @onclick="Generate">GENERATE CIPHERTEXT</button>
<br />
<p>@ciphertext</p>
<p>@cipher</p>
<textarea>@input</textarea>
<button>SUBMIT</button>

<button @onclick="Hint">HINT</button>
<p>@hints</p>

@code {
    Random rnd = new Random();
    int hintCount = 0;

    string choice = "";
    string cipher = "";
    string hints = "";
    string input = "";

    string[] ciphers = { "caesar", "vigenere", "affine", "substitution" };
    string plaintext = "", ciphertext = "";

    string decryptionAttempt = "";


    void getSampleText()
    {
        Random rnd = new Random();
        string[] paragraphs = File.ReadAllLines(System.IO.Path.Combine(System.IO.Directory.GetCurrentDirectory(), "wwwroot/sampleText.txt"));
        plaintext = paragraphs[rnd.Next(1, paragraphs.Length)];
    }

    void Generate()
    {
        getSampleText();        

        switch(choice)
        {
            case "cipher":
                EncryptWithSpecificCipher(cipher);
                break;


            case "parts":
                break;

            case "random":
                Random rnd = new Random();
                cipher = ciphers[rnd.Next(0, ciphers.Length)];
                EncryptWithSpecificCipher(cipher);
                break;

            default:
                break;

        }
    }

    void EncryptWithSpecificCipher(string input)
    {
        
        switch (input)
        {
            case "caesar":
                ciphertext = Caesar.Encrypt(plaintext, rnd.Next(1, 25));
                break;

            case "affine":
                ciphertext = Affine.Encrypt(rnd.Next(1, 25), rnd.Next(1, 25), plaintext);
                break;

            case "vigenere":
                string key = "";
                while (key.Length < 26)
                {
                    int c = rnd.Next(0, 26) + 97;
                    if (!key.Contains((char)c))
                    {
                        key += (char)c;
                    }
                }
                ciphertext = Vigenere.Encrypt(key, plaintext);
                break;

            case "substitution":
                string k = "";
                while (k.Length < 26)
                {
                    int c = rnd.Next(0, 26) + 97;
                    if (!k.Contains((char)c))
                    {
                        k += (char)c;
                    }
                }
                //Substitution.getKey()
                //ciphertext = Substitution.Encrypt(key, plaintext);
                break;


        }        
    }

    void Hint()
    {
        switch(hintCount)
        {
            case 0:
                hints = "The type of cipher is: " + cipher;
                break;

            case 1:
                hints += "\n A part of the plaintext is: " + plaintext.Substring(0, 10);
                break;

        }
    }

    void HintBcWrong()
    {
        switch(cipher)
        {
            case "vigenere":
                double iocInput = CryptanalysisFunctions.IndexOfCoincidence(input);
                double expectedIoc = CryptanalysisFunctions.IndexOfCoincidence(plaintext);
                if(iocInput< expectedIoc)
                {
                    hints += "\n Try a different length of key";
                }
                break;

        }
    }


    bool Check()
    {
        bool error = false;
        int i = 0;
        while(! error && i < ciphertext.Length)
        {
            if(ciphertext[i] != decryptionAttempt[i])
            {
                error = true;
                return false;
            }
        }
        return true;
    }



}
