@page "/cryptanalysis"
@rendermode InteractiveServer

<h3>Cryptanalysis</h3>
<textarea class="submission" @bind=input @bind:event="oninput"></textarea>

<button @onclick="submit">SUBMIT</button>

<div class="flexBox">
    <div class="stat box">
        <b>Index Of Coincidence: <span>@ioc</span></b>
        <p>The index of coincidence in English is 0.0667 and random is around 0.0385. The closer to random it is, the more alphabets used, so the longer the length of the key.</p>
    </div>
    <div class="stat box">
        <b>Chi-squared Statistic:</b>
        <span>@chisquared</span>
        <p>Tests how closely the values are the the expected frequencies. The higher the number, the less similar they are.</p>
    </div>
    <div class="stat box">
        <b>Angle Between Vectors</b>
        <span>@angles</span>
        <p>Models the frequencies as 26D vectors. The smaller the angle between them, the more similar they are.</p>
    </div>
    <div class="stat box">
        <b>Shanonnon Entropy</b>
        <span>@entropy</span>
        <p>The expected value is around 4.16</p>
    </div>
    <div class="graph box">
        <b>Monogram Frequencies</b>
        <BarChart @ref="monogram" Width="400" Height="300" />
    </div>
    <div class="stat box">
        <b>Bigram Frequencies</b>
        <span>@bigramFitness</span>
        <p>The lower the number is, the closer the fitness is to English, based on probabilities of pairs of letters.</p>
    </div>
</div>


@code {

    string input = "";
    double ioc = 0;
    double chisquared = 0;
    double angles = 0;
    double entropy = 0;
    double bigramFitness = 0;

    BarChart monogram = default!;
    BarChartOptions barChartOptions = default!;
    ChartData chartData = default!;


    double[] frequencies = CryptanalysisFunctions.ExpectedMonogramFrequencies();
    double[] expected = new double[26];
    int[] actual = new int[26];

    async void submit()
    {
        actual = CryptanalysisFunctions.CalculateLetterFrequencies(input);
        int length = CryptanalysisFunctions.Length(actual);

        for (int i = 0; i < 26; i++)
        {
            expected[i] = frequencies[i] * length ;
        }


        ioc = CryptanalysisFunctions.IndexOfCoincidence(actual);
        chisquared = CryptanalysisFunctions.X2Stat(actual);
        angles = CryptanalysisFunctions.VectorAngles(actual);
        entropy = CryptanalysisFunctions.ShannonEntropy(actual);
        bigramFitness = CryptanalysisFunctions.BigramFitness(input) * -1;

        var alphabets = new List<IChartDataset>();
        alphabets.Add(new BarChartDataset() { Label = "Expected", Data = expected.ToList().Select(Convert.ToDouble).ToList() });
        alphabets.Add(new BarChartDataset() { Label = "Actual", Data = actual.ToList().Select(Convert.ToDouble).ToList() });        

        chartData.Datasets = alphabets;

        await monogram.InitializeAsync(chartData, barChartOptions);
        await monogram.UpdateAsync(chartData, barChartOptions);

    }

    protected override void OnInitialized()
    {
        string[] alphabet = { "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z" };
        chartData = new ChartData { Labels = alphabet.ToList(), Datasets = new List<IChartDataset>() };

    }
 

}
